--
When would you want to use a remote repository rather than keeping all your work local?
  - When more than one person is contributing to the project
  - When you are using more than one machine to work on the project (keeping repos in sync)
  - Possibly if you machine is damage, safety
--
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
  - You're working on a feature and don't want any new code that has been added to the remote to be automatically added
  - You would like to create a new branch with the code you have added and staying in sync would complicated this
--
Describe the differences between forks, clones, and branches. When would you use one instead of another?
  Forks: takes a GitHub repository on someone else's account and creates a copy on your account. Use this when you want to add/change code on another project in GitHub without changing the original repository
  Clones: Creates a copy of a GitHub or local repository and in a new repository. Use this when you want to work on a GitHub repository so you can modify the files locally
  Branches: Creates a different version of a project, allows a user to create a distinct commit history. Use when you want to experiment or create a different version of the code without affecting the master branch.
--
What is the benefit of having a copy of the last known state of the remote stored locally?
  - Offline work. A user can work offline and merge commits to the local origin/master
  - Simplicity. Doesn't require complex code on GitHub when its required to merge changes on a local file with the remote
--
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
  I would collaborate on a file storage service like Dropbox or Drive. It would be easy initially to setup and start working. But working on the same code at the same time would be difficult/impossible and reverting code would be difficult.
--
When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
  If you want to manage commits via pull requests. You can more easily manage commits in a structured way
--
